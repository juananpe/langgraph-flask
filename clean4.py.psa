# -*- coding: utf-8 -*-
import os
from dotenv import load_dotenv

load_dotenv()

# Load API key from secrets
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# Check if the key was loaded successfully
if OPENAI_API_KEY:
    os.environ['OPENAI_API_KEY'] = OPENAI_API_KEY
    print("API keys loaded successfully.")
else:
    print("API keys not found in secrets.")

from typing import TypedDict, Annotated, Literal
from langchain_core.messages import HumanMessage, SystemMessage, AnyMessage
from langgraph.graph import add_messages, StateGraph, END
from langchain_openai import ChatOpenAI
from langgraph.types import interrupt, Command
from langgraph.checkpoint.memory import InMemorySaver

class State(TypedDict):
    messages: Annotated[list[AnyMessage], add_messages]

class TweetApprovalAgent:
    def __init__(self, model, system=""):
        self.system = system
        self.model = model
        self.decision = None

        graph = StateGraph(State)

        # Add nodes
        graph.add_node("generate_post", self.generate_post)
        graph.add_node("post", self.post)
        graph.add_node("collect_feedback", self.collect_feedback)

        # Set entry point
        graph.set_entry_point("generate_post")

        # Add conditional edges - using a router function instead of a router node
        graph.add_conditional_edges(
            "generate_post",
            self.review_decision,
            {"post": "post", "feedback": "collect_feedback"}
        )

        graph.add_edge("post", END)
        graph.add_edge("collect_feedback", "generate_post")

        self.graph = graph.compile()

    def generate_post(self, state: State):
        messages = state["messages"]
        if self.system and len(messages) == 1:  # Only add system message on first call
            messages = [SystemMessage(content=self.system)] + messages

        result = self.model.invoke(messages)

        # Show post and get approval directly in this function
        post_content = result.content
        print("\nðŸ“¢ Current Twitter/X Post:\n")
        print(post_content)
        print("\n")

        self.decision = input("Post to Twitter/X? (yes/no): ")

        return {"messages": result}

    def review_decision(self, state: State) -> Literal["post", "feedback"]:
        # This is the router function that replaces the GET_REVIEW_DECISION node
        if self.decision and self.decision.lower() == "yes":
            return "post"
        else:
            return "feedback"

    def post(self, state: State):
        final_post = state["messages"][-1].content
        print("\nðŸ“¢ Final Twitter/X Post:\n")
        print(final_post)
        print("\nâœ… Post has been approved and is now live on Twitter/X!")
        return {"messages": state["messages"]}

    def collect_feedback(self, state: State):
        feedback = input("How can I improve this post? ")
        return {"messages": [HumanMessage(content=feedback)]}

# Create the agent
llm = ChatOpenAI(model="gpt-4o")
system_prompt = "You are a professional social media manager who writes engaging Twitter/X posts."
agent = TweetApprovalAgent(llm, system=system_prompt)

# Run the agent
response = agent.graph.invoke({
    "messages": [HumanMessage(content="Write a Twitter/X post on AI Agents and LangGraph")]
})